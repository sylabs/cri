version: 2.1

orbs:
  codecov: codecov/codecov@1.0.4

defaults: &defaults
  working_directory: ~/singularity-cri
  docker:
    - image: golang:1.12-stretch

jobs:
  get_source:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
            - singularity-cri

  build_source:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install libseccomp
          command: |
            apt-get update -y
            apt-get install -y libseccomp-dev
      - run:
          name: Build source
          command: make
      - persist_to_workspace:
          root: ~/
          paths:
            - singularity-cri/bin

  unit_test:
    machine: true
    working_directory: ~/singularity-cri
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup environment
          command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:/usr/local/libexec/singularity/bin/' >> $BASH_ENV
      - run:
          name: Update go to 1.12
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.12.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.12.linux-amd64.tar.gz
      - run:
          name: Install dev libraries
          command: |
            sudo apt-get update -y
            sudo apt-get install -y build-essential libssl-dev uuid-dev squashfs-tools libseccomp-dev libgpgme11-dev
      - run:
          name: Install singularity
          working_directory: ~
          command: |
            git clone https://github.com/sylabs/singularity.git
            cd singularity
            ./mconfig -p /usr/local
            make -j$(nproc) -C ./builddir
            sudo make -C ./builddir install
      - run:
          name: Run tests
          command: make test
      - codecov/upload:
          file: cover.out

  validation_test:
    machine: true
    working_directory: ~/singularity-cri
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup environment
          command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:/usr/local/libexec/singularity/bin/' >> $BASH_ENV
      - run:
          name: Update go to 1.12
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.12.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.12.linux-amd64.tar.gz
      - run:
          name: Install dev libraries
          command: |
            sudo apt-get update -y
            sudo apt-get install -y build-essential libssl-dev uuid-dev squashfs-tools libgpgme11-dev
            sudo apt-get install -y libseccomp2=2.2.3-2ubuntu1~ubuntu14.04.1
            sudo apt-get install -y libseccomp-dev=2.2.3-2ubuntu1~ubuntu14.04.1
            sudo apt-get install -y apparmor-profiles apparmor-utils socat
      - run:
          name: Install singularity
          working_directory: ~
          command: |
            git clone https://github.com/sylabs/singularity.git
            cd singularity
            ./mconfig -p /usr/local
            make -j$(nproc) -C ./builddir
            sudo make -C ./builddir install
      - run:
          name: Make test binary
          command: make bin/sycri.test
      - run:
          name: Write CNI config for CRI
          command: |
            mkdir /tmp/net.d
            cp .circleci/bridge.conflist /tmp/net.d/00_bridge.conflist
      - run:
          name: Install validation tests suite
          working_directory: /tmp
          command: |
            export VERSION=v1.13.0
            wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/critest-$VERSION-linux-amd64.tar.gz
            sudo tar zxvf critest-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
            rm -f critest-$VERSION-linux-amd64.tar.gz
      - run:
          name: Launch singularity CRI
          command: |
            sudo bin/sycri.test -test.coverprofile=cover_main.out -test.run Main -v 5 -config .circleci/sycri-test.yaml 2>&1 | tee $HOME/sycri.out
            sed -i 's/\x1b\[[0-9;]*m//g' $HOME/sycri.out
            touch $HOME/sycri-finished
          background: true
      - run:
          name: Run validation tests
          working_directory: /tmp
          command: |
            set +e
            set +o pipefail
            sudo critest --runtime-endpoint=unix:///var/run/singularity.sock --image-endpoint=unix:///var/run/singularity.sock | tee $HOME/validation.out
            sed -i 's/\x1b\[[0-9;]*m//g' $HOME/validation.out
            export PASSED=`tail -n 2 $HOME/validation.out | head -n 1 | sed 's/.* -- \([0-9]\+\).*/\1/'`
            if [ $PASSED -lt 68 ]; then
              exit 1
            fi
      - run:
          name: Stop singularity CRI
          command: |
            export SYCRI_PID=`ps -a | grep sycri.test | awk '{print $1}'`
            if [ ! -z $SYCRI_PID ]; then
              sudo kill $SYCRI_PID
              while [ ! -f $HOME/sycri-finished ]
              do
                echo 'waiting singularity-cri return'
                sleep 2
              done
            fi
          when: always
      - store_artifacts:
          path: ~/sycri.out
          destination: sycri.out
      - store_artifacts:
          path: ~/validation.out
          destination: validation.out
      - store_artifacts:
          path: /tmp/sycri-trash
          destination: sycri-trash
      - codecov/upload:
          file: cover_main.out

workflows:
  version: 2
  build_and_test:
    jobs:
      - get_source
      - unit_test:
          requires:
            - get_source
          context: aws-development
      - build_source:
          requires:
            - get_source
      - validation_test:
          requires:
            - build_source
            - unit_test
