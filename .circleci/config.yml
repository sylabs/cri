version: 2.0

defaults: &defaults
  working_directory: /go/src/github.com/sylabs/singularity-cri
  docker:
    - image: golang:1.11-stretch

jobs:
  get_source:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install dep tool
          working_directory: /
          command: |
            mkdir -p $GOPATH/bin
            curl -s https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - run:
          name: Ensure vendored dependencies
          command: |
            if [ ! -d vendor ]; then
              dep ensure -vendor-only
            fi
      - persist_to_workspace:
          root: /go
          paths:
            - src/github.com/sylabs/singularity-cri

  gometalinter_check:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /go
    - run:
        name: Install gometalinter
        working_directory: /
        command: curl -L https://git.io/vp6lP | sh
    - run:
        name: Check formatting
        command: make lint

  build_source:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /go
      - run:
          name: Install libseccomp
          command: |
            apt-get update -y
            apt-get install -y libseccomp-dev
      - run:
          name: Build source
          command: make

  unit_test:
    machine: true
    steps:
      - attach_workspace:
          at: ~/go
      - run:
          name: Setup environment
          command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export GOCACHE=off' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:/usr/local/libexec/singularity/bin/' >> $BASH_ENV
      - run:
          name: Update go to 1.11
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.11.linux-amd64.tar.gz
      - run:
          name: Install dep tool
          command: |
            mkdir -p $GOPATH/bin
            curl -s https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - run:
          name: Install dev libraries
          command: |
            sudo apt-get update -y
            sudo apt-get install -y build-essential libssl-dev uuid-dev squashfs-tools libseccomp-dev libgpgme11-dev
      - run:
          name: Install singularity
          command: |
            git clone https://github.com/sylabs/singularity.git $GOPATH/src/github.com/sylabs/singularity
            cd $GOPATH/src/github.com/sylabs/singularity
            ./mconfig -p /usr/local
            make -j$(nproc) -C ./builddir
            sudo make -C ./builddir install
      - run:
          name: Run tests
          command: |
            cd $GOPATH/src/github.com/sylabs/singularity-cri
            make test
            cp cover.out $HOME
      - store_artifacts:
         path: ~/cover.out
         destination: cover_profile.out

  validation_test:
    docker:
      - image: ubuntu:18.04
    steps:
      - run:
          name: Setup environment
          command: |
            echo $PATH
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export GOCACHE=off' >> $BASH_ENV
            echo 'export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:/usr/local/libexec/singularity/bin/:' >> $BASH_ENV
            apt-get update -y
            apt-get install -y wget git make pkg-config
      - run:
          name: Install go to 1.11
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go1.11.linux-amd64.tar.gz
      - run:
          name: Setup go workspace
          command: |
            mkdir -p $GOPATH/src
            mkdir -p $GOPATH/bin
            mkdir -p $GOPATH/pkg
      - run:
          name: Install singularity CRI
          command: |
            git clone https://github.com/sylabs/singularity-cri.git $GOPATH/src/github.com/sylabs/singularity-cri
            cd $GOPATH/src/github.com/sylabs/singularity-cri
            make
            make install
      - run:
          name: Install dep tool
          command: |
            curl -s https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - run:
          name: Install dev libraries
          command: |
            apt-get update -y
            apt-get install -y build-essential libssl-dev uuid-dev squashfs-tools libseccomp-dev libgpgme11-dev
            apt-get install -y apparmor-profiles apparmor-utils
      - run:
          name: Install singularity
          command: |
            git clone https://github.com/sylabs/singularity.git $GOPATH/src/github.com/sylabs/singularity
            cd $GOPATH/src/github.com/sylabs/singularity
            ./mconfig -p /usr/local
            make -j$(nproc) -C ./builddir
            make -C ./builddir install
      - run:
          name: Write CNI config for CRI
          command: |
            mkdir $HOME/net.d
            cat > $HOME/net.d/00_bridge.conflist<< EOF
              {
                "cniVersion": "0.3.1",
                "name": "bridge",
                "plugins": [
                {"type": "loopback"},
                {
                  "type": "bridge",
                  "bridge": "sbr0",
                  "isGateway": true,
                  "ipMasq": true,
                  "ipam": {
                    "type": "host-local",
                    "subnet": "10.22.0.0/16",
                    "routes": [
                    { "dst": "0.0.0.0/0" }
                    ]
                  }
                },
                {
                  "type": "portmap",
                  "capabilities": {"portMappings": true},
                  "snat": true
                }
                ]
              }
            EOF
      - run:
          name: Write singularity test CRI config
          command: |
            cat > $HOME/sycri-test.yaml<< EOF
              listenSocket: /var/run/singularity.sock
              storageDir: /var/lib/singularity
              cniBinDir: /usr/local/libexec/singularity/cni
              cniConfDir: $HOME/net.d
              baseRunDir: /var/run/singularity
              trashDir: /tmp/sycri-trash
              debug: true
            EOF
      - run:
          name: Install validation tests suite
          command: |
            export VERSION=v1.13.0
            wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/critest-$VERSION-linux-amd64.tar.gz
            tar zxvf critest-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
            rm -f critest-$VERSION-linux-amd64.tar.gz
      - run:
          name: Launch singularity CRI
          command: sycri -v=10 -config $HOME/sycri-test.yaml | tee $HOME/sycri.out
          background: true
      - run:
          name: Run validation tests
          command: |
            critest --runtime-endpoint=unix:///var/run/singularity.sock --image-endpoint=unix:///var/run/singularity.sock | tee $HOME/validation.out
      - run:
          name: Stop singularity CRI
          command: |
            export SYCRI_PID=`ps -a | grep sycri | awk '{print $1}'`
            echo $SYCRI_PID
            if [ ! -z $SYCRI_PID ]; then
              kill $SYCRI_PID
            fi
          when: always
      - store_artifacts:
         path: ~/sycri.out
         destination: sycri.out
      - store_artifacts:
         path: ~/validation.out
         destination: validation.out
      - store_artifacts:
         path: /tmp/sycri-trash
         destination: sycri-trash

workflows:
  version: 2
  build_and_test:
    jobs:
      - get_source
      - gometalinter_check:
          requires:
            - get_source
      - unit_test:
          requires:
            - get_source
      - build_source:
          requires:
            - get_source
      - validation_test:
          requires:
            - build_source
